(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{131:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return N}));var r=t(0),o=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=o.a.createContext({}),_=function(e){var n=o.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=_(e.components);return o.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=_(t),u=r,N=l["".concat(a,".").concat(u)]||l[u]||d[u]||i;return t?o.a.createElement(N,c(c({ref:n},p),{},{components:t})):o.a.createElement(N,c({ref:n},p))}));function N(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var p=2;p<i;p++)a[p]=t[p];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return _}));var r=t(3),o=t(7),i=(t(0),t(131)),a={title:"CI/CD",slug:"/deployments/cicd"},c={unversionedId:"16_Deployments/3_CICD",id:"16_Deployments/3_CICD",isDocsHomePage:!1,title:"CI/CD",description:"GitLab CI",source:"@site/docs/16_Deployments/3_CICD.md",slug:"/deployments/cicd",permalink:"/symfony-boilerplate/docs/deployments/cicd",editUrl:"https://github.com/thecodingmachine/symfony-boilerplate/tree/master/docs/docs/16_Deployments/3_CICD.md",version:"current",sidebar:"docs",previous:{title:"Docker Images",permalink:"/symfony-boilerplate/docs/deployments/docker-images"},next:{title:"Run",permalink:"/symfony-boilerplate/docs/deployments/run"}},s=[{value:"GitLab CI",id:"gitlab-ci",children:[]}],p={rightToc:s};function _(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"gitlab-ci"},"GitLab CI"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml",metastring:'title=".gitlab-ci.yml"',title:'".gitlab-ci.yml"'}),'stages:\n  - tests\n  - build_push_docker_images\n\n# ------------------------------------------\n# TESTS\n# ------------------------------------------\n\napi_tests:\n  stage: tests\n  image: thecodingmachine/php:7.4-v3-cli\n  services:\n    - name: mysql:8.0\n      command: ["--default-authentication-plugin=mysql_native_password"]\n  variables:\n    # Docker PHP image.\n    # ---------------------\n    APACHE_DOCUMENT_ROOT: "public/"\n    PHP_EXTENSION_XDEBUG: "1"\n    PHP_EXTENSION_REDIS: "1"\n    PHP_EXTENSION_INTL: "1"\n    PHP_EXTENSION_GD: "1"\n    PHP_INI_MEMORY_LIMIT: "1G"\n    # Docker MySQL image.\n    # Make sure the values are matching\n    # the corresponding values from SYMFONY_ENV_CONTENT.\n    # ---------------------\n    MYSQL_ROOT_PASSWORD: "foo"\n    MYSQL_DATABASE: "foo"\n    MYSQL_USER: "foo"\n    MYSQL_PASSWORD: "foo"\n    # Symfony.\n    # ---------------------\n    SYMFONY_ENV_CONTENT: "$SYMFONY_ENV_CONTENT_TESTS" # .env file content for tests (from GitLab CI/CD variables).\n  before_script:\n    - cd src/api\n    - echo "$SYMFONY_ENV_CONTENT" > .env\n  script:\n    - composer install\n    - composer dump-env test\n    # Static analysis.\n    - composer cscheck\n    - composer phpstan\n    - composer deptrac\n    - composer yaml-lint\n    # Integration tests.\n    - composer pest\n\nwebapp_tests:\n  stage: tests\n  image: thecodingmachine/nodejs:12\n  before_script:\n    - cd src/webapp\n  script:\n    - yarn\n    # Static analysis.\n    - yarn lint\n\n# ------------------------------------------\n# BUILD PUSH DOCKER IMAGES\n# ------------------------------------------\n\n.api_build_push_docker_image:\n  stage: build_push_docker_images\n  image: docker:git\n  services:\n    - docker:dind\n  variables:\n    DOCKER_DRIVER: "overlay2"\n    SYMFONY_ENV_CONTENT: "foo"\n    ENV_NAME: "foo"\n  before_script:\n    - cd src/api\n  script:\n    - echo "$SYMFONY_ENV_CONTENT" > .env\n    - docker login -u gitlab-ci-token -p "$CI_BUILD_TOKEN" registry.example.com\n    - docker build -t "registry.example.com/group/project/api-$ENV_NAME:$CI_COMMIT_REF_SLUG" .\n    - docker push "registry.example.com/group/project/api-$ENV_NAME:$CI_COMMIT_REF_SLUG"\n  only:\n    - tags\n\napi_build_push_docker_image_testing:\n  extends: .api_build_push_docker_image\n  variables:\n    SYMFONY_ENV_CONTENT: "$SYMFONY_ENV_CONTENT_TESTING" # .env file content for testing (from GitLab CI/CD variables).\n    ENV_NAME: "testing"\n\napi_build_push_docker_image_staging:\n  extends: .api_build_push_docker_image\n  variables:\n    SYMFONY_ENV_CONTENT: "$SYMFONY_ENV_CONTENT_STAGING" # .env file content for staging (from GitLab CI/CD variables).\n    ENV_NAME: "staging"\n\napi_build_push_docker_image_prod:\n  extends: .api_build_push_docker_image\n  variables:\n    SYMFONY_ENV_CONTENT: "$SYMFONY_ENV_CONTENT_PROD" # .env file content for prod (from GitLab CI/CD variables).\n    ENV_NAME: "prod"\n\n.webapp_build_push_docker_image:\n  stage: build_push_docker_images\n  image: docker:git\n  services:\n    - docker:dind\n  variables:\n    DOCKER_DRIVER: "overlay2"\n    NUXTJS_ENV_CONTENT: "foo"\n    ENV_NAME: "foo"\n  before_script:\n    - cd src/webapp\n  script:\n    - echo "$NUXTJS_ENV_CONTENT" > .env\n    - docker login -u gitlab-ci-token -p "$CI_BUILD_TOKEN" registry.example.com\n    - docker build -t "registry.example.com/group/project/webapp-$ENV_NAME:$CI_COMMIT_REF_SLUG" .\n    - docker push "registry.example.com/group/project/webapp-$ENV_NAME:$CI_COMMIT_REF_SLUG"\n  only:\n    - tags\n\nwebapp_build_push_docker_image_testing:\n  extends: .webapp_build_push_docker_image\n  variables:\n    NUXTJS_ENV_CONTENT: "$NUXTJS_ENV_CONTENT_TESTING" # .env file content for testing (from GitLab CI/CD variables).\n    ENV_NAME: "testing"\n\nwebapp_build_push_docker_image_staging:\n  extends: .webapp_build_push_docker_image\n  variables:\n    NUXTJS_ENV_CONTENT: "$NUXTJS_ENV_CONTENT_STAGING" # .env file content for staging (from GitLab CI/CD variables).\n    ENV_NAME: "staging"\n\nwebapp_build_push_docker_image_prod:\n  extends: .webapp_build_push_docker_image\n  variables:\n    NUXTJS_ENV_CONTENT: "$NUXTJS_ENV_CONTENT_PROD" # .env file content for prod (from GitLab CI/CD variables).\n    ENV_NAME: "prod"\n')))}_.isMDXComponent=!0}}]);